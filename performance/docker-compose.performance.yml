version: '3.8'

# Performance Optimization Stack for Fixia
services:
  # Redis - Primary Caching Layer
  redis-primary:
    image: redis:7-alpine
    container_name: fixia-redis-primary
    ports:
      - "6379:6379"
    volumes:
      - redis_primary_data:/data
      - ./config/redis/redis-primary.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - performance
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Redis Sentinel for High Availability
  redis-sentinel:
    image: redis:7-alpine
    container_name: fixia-redis-sentinel
    volumes:
      - ./config/redis/sentinel.conf:/usr/local/etc/redis/sentinel.conf
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    networks:
      - performance
    depends_on:
      - redis-primary
    restart: unless-stopped

  # Memcached - Session Storage
  memcached:
    image: memcached:1.6-alpine
    container_name: fixia-memcached
    ports:
      - "11211:11211"
    command: memcached -m 128 -c 1024 -I 4m
    networks:
      - performance
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M

  # Varnish - HTTP Accelerator
  varnish:
    image: varnish:7.1
    container_name: fixia-varnish
    ports:
      - "8081:80"
      - "6082:6082"
    volumes:
      - ./config/varnish/default.vcl:/etc/varnish/default.vcl
    environment:
      - VARNISH_SIZE=256M
    command: varnishd -F -f /etc/varnish/default.vcl -s malloc,256M -a :80
    networks:
      - performance
    restart: unless-stopped
    depends_on:
      - nginx-proxy

  # Nginx - Reverse Proxy & Load Balancer
  nginx-proxy:
    image: nginx:1.25-alpine
    container_name: fixia-nginx-proxy
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/sites:/etc/nginx/sites-available
      - ./config/nginx/ssl:/etc/nginx/ssl
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    networks:
      - performance
    restart: unless-stopped
    depends_on:
      - redis-primary

  # HAProxy - Advanced Load Balancing
  haproxy:
    image: haproxy:2.8-alpine
    container_name: fixia-haproxy
    ports:
      - "8082:80"
      - "8443:443"
      - "8404:8404"  # Stats page
    volumes:
      - ./config/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    networks:
      - performance
    restart: unless-stopped

  # Apache Kafka - Event Streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: fixia-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - performance
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: fixia-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      - performance
    depends_on:
      - zookeeper
    restart: unless-stopped

  # Elasticsearch - Search & Analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: fixia-elasticsearch
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - performance
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G

  # RabbitMQ - Message Queue
  rabbitmq:
    image: rabbitmq:3.11-management-alpine
    container_name: fixia-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: fixia
      RABBITMQ_DEFAULT_PASS: fixia_rabbitmq_2024
      RABBITMQ_DEFAULT_VHOST: /fixia
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - performance
    restart: unless-stopped

  # MinIO - S3-compatible Object Storage
  minio:
    image: minio/minio:RELEASE.2023-08-23T10-07-06Z
    container_name: fixia-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: fixia_minio
      MINIO_ROOT_PASSWORD: fixia_minio_secure_2024
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - performance
    restart: unless-stopped

  # PostgreSQL Read Replica
  postgres-replica:
    image: postgres:15
    container_name: fixia-postgres-replica
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: fixia_replica
      POSTGRES_USER: fixia_replica
      POSTGRES_PASSWORD: fixia_replica_password_2024
      POSTGRES_MASTER_SERVICE: postgres-primary
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./config/postgres/postgresql-replica.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - performance
    restart: unless-stopped

  # pgBouncer - Connection Pooling
  pgbouncer:
    image: pgbouncer/pgbouncer:1.19.0
    container_name: fixia-pgbouncer
    ports:
      - "6432:6432"
    environment:
      DATABASES_HOST: postgres-primary
      DATABASES_PORT: 5432
      DATABASES_USER: fixia_user
      DATABASES_PASSWORD: fixia_password
      DATABASES_DBNAME: fixia_production
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 1000
      DEFAULT_POOL_SIZE: 25
    networks:
      - performance
    restart: unless-stopped

  # New Relic Infrastructure Agent
  newrelic-infra:
    image: newrelic/infrastructure:latest
    container_name: fixia-newrelic-infra
    cap_add:
      - SYS_PTRACE
    network_mode: host
    pid: host
    privileged: true
    volumes:
      - /:/host:ro
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      NRIA_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      NRIA_DISPLAY_NAME: "Fixia Production Server"
    restart: unless-stopped

  # Performance Testing - Artillery
  artillery:
    build: ./docker/artillery
    container_name: fixia-artillery
    volumes:
      - ./performance-tests:/tests
      - artillery_results:/results
    networks:
      - performance
    profiles:
      - testing
    command: tail -f /dev/null

  # CDN Simulator (for testing)
  cdn-simulator:
    image: nginx:1.25-alpine
    container_name: fixia-cdn-simulator
    ports:
      - "8084:80"
    volumes:
      - ./config/cdn/nginx.conf:/etc/nginx/nginx.conf
      - ./static-assets:/usr/share/nginx/html
    networks:
      - performance
    restart: unless-stopped

volumes:
  redis_primary_data:
  nginx_cache:
  nginx_logs:
  elasticsearch_data:
  rabbitmq_data:
  minio_data:
  postgres_replica_data:
  artillery_results:

networks:
  performance:
    driver: bridge
    name: fixia-performance
    ipam:
      config:
        - subnet: 172.20.0.0/16