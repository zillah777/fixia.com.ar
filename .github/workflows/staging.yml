name: Deploy to Staging

on:
  push:
    branches: [develop, staging]
  pull_request:
    branches: [develop, staging]

env:
  NODE_VERSION: '18'

jobs:
  # Quality Gates for Staging
  quality-gates-staging:
    name: Quality Gates - Staging
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            apps/web/package-lock.json
            apps/api/package-lock.json
    
      - name: Install Dependencies
        run: |
          cd apps/web && npm ci
          cd ../api && npm ci
          
      - name: Lint and Type Check
        run: |
          cd apps/web && npm run type-check
          cd ../api && npm run lint
          
      - name: Run Tests
        run: |
          cd apps/api && npm run test
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/test"
          JWT_SECRET: "test-jwt-secret"
          
      - name: Build Applications
        run: |
          cd apps/web && npm run build
          cd ../api && npm run build

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-gates-staging]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy Frontend to Vercel Preview
        run: |
          npm install -g vercel
          vercel --token ${{ secrets.VERCEL_TOKEN }} --yes
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        
      - name: Deploy Backend to Railway Staging
        uses: railway-app/railway-action@v1
        with:
          railway-token: ${{ secrets.RAILWAY_TOKEN_STAGING }}
          working-directory: apps/api
        env:
          NODE_ENV: staging

  # Staging Health Checks
  staging-health-check:
    name: Staging Health Check
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    
    steps:
      - name: Wait for deployment
        run: sleep 45
        
      - name: Check staging backend health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.STAGING_API_URL }}/health)
          if [ $response -ne 200 ]; then
            echo "Staging backend health check failed"
            exit 1
          fi
          echo "Staging deployment successful"