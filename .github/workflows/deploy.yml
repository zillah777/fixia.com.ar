name: Deploy to Production

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '18'
  
jobs:
  # Quality Gates - Lint and Test
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            apps/web/package-lock.json
            apps/api/package-lock.json
    
      - name: Install Frontend Dependencies
        run: |
          cd apps/web
          npm ci
          
      - name: Install Backend Dependencies  
        run: |
          cd apps/api
          npm ci
          
      - name: Lint Frontend
        run: |
          cd apps/web
          npm run type-check
          
      - name: Lint Backend
        run: |
          cd apps/api
          npm run lint
          
      - name: Test Backend
        run: |
          cd apps/api
          npm run test
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/test"
          JWT_SECRET: "test-jwt-secret"
          
      - name: Build Frontend
        run: |
          cd apps/web
          npm run build
          
      - name: Build Backend
        run: |
          cd apps/api
          npm run build

  # Deploy Frontend to Vercel
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Vercel CLI
        run: npm install -g vercel
        
      - name: Deploy to Vercel
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            vercel --token ${{ secrets.VERCEL_TOKEN }} --yes
          else
            vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --yes
          fi
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  # Deploy Backend to Railway
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Railway
        uses: railway-app/railway-action@v1
        with:
          railway-token: ${{ secrets.RAILWAY_TOKEN }}
          working-directory: apps/api
        env:
          NODE_ENV: production

  # Health Check & Smoke Tests
  post-deploy-checks:
    name: Post-Deploy Health Checks
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Wait for deployment stabilization
        run: sleep 60
        
      - name: Health Check - Backend API
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.API_URL }}/health)
          if [ $response -ne 200 ]; then
            echo "Backend health check failed with status: $response"
            exit 1
          fi
          echo "Backend health check passed"
          
      - name: Health Check - Frontend
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.FRONTEND_URL }})
          if [ $response -ne 200 ]; then
            echo "Frontend health check failed with status: $response"
            exit 1
          fi
          echo "Frontend health check passed"
          
      - name: Smoke Test - API Authentication
        run: |
          # Test that the API is responding to basic requests
          response=$(curl -s -w "%{http_code}" ${{ secrets.API_URL }}/auth/check)
          if [ ${response: -3} -eq 401 ] || [ ${response: -3} -eq 200 ]; then
            echo "API authentication endpoint is responding correctly"
          else
            echo "API authentication check failed with status: ${response: -3}"
            exit 1
          fi

  # Notification on failure
  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [quality-gates, deploy-frontend, deploy-backend, post-deploy-checks]
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: Notify deployment failure
        run: |
          echo "Deployment failed for commit ${{ github.sha }}"
          echo "Please check the logs and fix the issues."
          # Here you could add Slack, Discord, or email notifications