name: Advanced Production Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Quality Gates
  security-audit:
    name: Security & Dependency Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          cd apps/api && npm ci
          cd ../web && npm ci
          
      - name: Security Audit - Backend
        run: |
          cd apps/api
          npm audit --audit-level high --production
          
      - name: Security Audit - Frontend  
        run: |
          cd apps/web
          npm audit --audit-level high --production
          
      - name: Dependency License Check
        uses: fossa-contrib/fossa-action@v2
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
          
      - name: Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Comprehensive Testing
  comprehensive-testing:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    needs: [security-audit]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          cd apps/api && npm ci
          cd ../web && npm ci
          
      - name: Backend Unit Tests
        run: |
          cd apps/api
          npm run test:cov
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/test"
          JWT_SECRET: "test-jwt-secret-for-ci"
          
      - name: Backend Integration Tests
        run: |
          cd apps/api
          npm run test:e2e
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/test"
          JWT_SECRET: "test-jwt-secret-for-ci"
          
      - name: Frontend Unit Tests
        run: |
          cd apps/web
          npm run test:coverage
          
      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          files: ./apps/api/coverage/lcov.info,./apps/web/coverage/lcov.info
          fail_ci_if_error: true

  # Performance Testing
  performance-testing:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [comprehensive-testing]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Artillery
        run: npm install -g artillery
        
      - name: Performance Tests - API
        run: |
          artillery run .github/workflows/performance/api-load-test.yml
          
      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './.github/workflows/performance/lighthouse.config.js'
          uploadArtifacts: true

  # Build and Push Container Images
  build-container:
    name: Build & Push Container Images  
    runs-on: ubuntu-latest
    needs: [comprehensive-testing]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            
      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Blue-Green Deployment
  deploy-production:
    name: Blue-Green Production Deployment
    runs-on: ubuntu-latest
    needs: [build-container, performance-testing]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://fixia.com.ar
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0
          
      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init
          
      - name: Terraform Plan
        run: |
          cd infrastructure/terraform
          terraform plan -var="environment=production"
        env:
          TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
          
      - name: Deploy to Railway (Blue Environment)
        uses: railway-app/railway-action@v1
        with:
          railway-token: ${{ secrets.RAILWAY_TOKEN }}
          working-directory: apps/api
        env:
          NODE_ENV: production
          DEPLOYMENT_SLOT: blue
          
      - name: Health Check - Blue Environment
        run: |
          echo "Checking blue environment health..."
          for i in {1..30}; do
            if curl -f "${{ secrets.BLUE_API_URL }}/health"; then
              echo "Blue environment healthy"
              break
            fi
            echo "Waiting for blue environment... ($i/30)"
            sleep 10
          done
          
      - name: Smoke Tests - Blue Environment
        run: |
          cd apps/web
          npm ci
          npm run test:e2e -- --config=playwright.prod.config.ts
        env:
          PLAYWRIGHT_BASE_URL: ${{ secrets.BLUE_FRONTEND_URL }}
          
      - name: Switch Traffic to Blue (Green â†’ Blue)
        run: |
          echo "Switching traffic to blue environment"
          # Railway/Vercel traffic switching logic
          curl -X POST "${{ secrets.RAILWAY_API }}/projects/${{ secrets.PROJECT_ID }}/deployments/promote" \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"environment": "blue"}'

  # Post-deployment verification
  post-deployment-verification:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Wait for DNS propagation
        run: sleep 60
        
      - name: Comprehensive Health Checks
        run: |
          # API Health
          curl -f "${{ secrets.API_URL }}/health" || exit 1
          
          # Database Health
          curl -f "${{ secrets.API_URL }}/health/database" || exit 1
          
          # Authentication Test
          response=$(curl -s -w "%{http_code}" "${{ secrets.API_URL }}/auth/check")
          if [[ "${response: -3}" != "401" ]]; then
            echo "Authentication endpoint issue"
            exit 1
          fi
          
      - name: Frontend Health Checks
        run: |
          # Core pages accessibility
          curl -f "${{ secrets.FRONTEND_URL }}" || exit 1
          curl -f "${{ secrets.FRONTEND_URL }}/services" || exit 1
          curl -f "${{ secrets.FRONTEND_URL }}/about" || exit 1
          
      - name: Performance Baseline Check
        run: |
          # API response time baseline
          response_time=$(curl -o /dev/null -s -w '%{time_total}' "${{ secrets.API_URL }}/health")
          if (( $(echo "$response_time > 0.5" | bc -l) )); then
            echo "API response time degraded: ${response_time}s"
            exit 1
          fi
          
      - name: Notify Success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: 'âœ… Fixia Production Deployment Successful'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Rollback on failure
  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-verification]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Rollback Railway Deployment
        run: |
          echo "Initiating emergency rollback"
          curl -X POST "${{ secrets.RAILWAY_API }}/projects/${{ secrets.PROJECT_ID }}/deployments/rollback" \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            -H "Content-Type: application/json"
            
      - name: Rollback Vercel Deployment
        uses: vercel/action@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prod --rollback'
          
      - name: Notify Rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: 'ðŸš¨ Emergency Rollback Executed - Fixia Production'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}